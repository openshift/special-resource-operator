// Code generated by MockGen. DO NOT EDIT.
// Source: helper.go

// Package resourcehelper is a generated GoMock package.
package resourcehelper

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
)

// MockHelper is a mock of Helper interface.
type MockHelper struct {
	ctrl     *gomock.Controller
	recorder *MockHelperMockRecorder
}

// MockHelperMockRecorder is the mock recorder for MockHelper.
type MockHelperMockRecorder struct {
	mock *MockHelper
}

// NewMockHelper creates a new mock instance.
func NewMockHelper(ctrl *gomock.Controller) *MockHelper {
	mock := &MockHelper{ctrl: ctrl}
	mock.recorder = &MockHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelper) EXPECT() *MockHelperMockRecorder {
	return m.recorder
}

// IsNamespaced mocks base method.
func (m *MockHelper) IsNamespaced(kind string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNamespaced", kind)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNamespaced indicates an expected call of IsNamespaced.
func (mr *MockHelperMockRecorder) IsNamespaced(kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNamespaced", reflect.TypeOf((*MockHelper)(nil).IsNamespaced), kind)
}

// IsNotUpdateable mocks base method.
func (m *MockHelper) IsNotUpdateable(kind string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotUpdateable", kind)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotUpdateable indicates an expected call of IsNotUpdateable.
func (mr *MockHelperMockRecorder) IsNotUpdateable(kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotUpdateable", reflect.TypeOf((*MockHelper)(nil).IsNotUpdateable), kind)
}

// IsOneTimer mocks base method.
func (m *MockHelper) IsOneTimer(obj *unstructured.Unstructured) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOneTimer", obj)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOneTimer indicates an expected call of IsOneTimer.
func (mr *MockHelperMockRecorder) IsOneTimer(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOneTimer", reflect.TypeOf((*MockHelper)(nil).IsOneTimer), obj)
}

// NeedsResourceVersionUpdate mocks base method.
func (m *MockHelper) NeedsResourceVersionUpdate(kind string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeedsResourceVersionUpdate", kind)
	ret0, _ := ret[0].(bool)
	return ret0
}

// NeedsResourceVersionUpdate indicates an expected call of NeedsResourceVersionUpdate.
func (mr *MockHelperMockRecorder) NeedsResourceVersionUpdate(kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeedsResourceVersionUpdate", reflect.TypeOf((*MockHelper)(nil).NeedsResourceVersionUpdate), kind)
}

// SetLabel mocks base method.
func (m *MockHelper) SetLabel(obj *unstructured.Unstructured, label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLabel", obj, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLabel indicates an expected call of SetLabel.
func (mr *MockHelperMockRecorder) SetLabel(obj, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLabel", reflect.TypeOf((*MockHelper)(nil).SetLabel), obj, label)
}

// SetMetaData mocks base method.
func (m *MockHelper) SetMetaData(obj *unstructured.Unstructured, nm, ns string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMetaData", obj, nm, ns)
}

// SetMetaData indicates an expected call of SetMetaData.
func (mr *MockHelperMockRecorder) SetMetaData(obj, nm, ns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetaData", reflect.TypeOf((*MockHelper)(nil).SetMetaData), obj, nm, ns)
}

// SetNodeSelectorTerms mocks base method.
func (m *MockHelper) SetNodeSelectorTerms(obj *unstructured.Unstructured, terms map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNodeSelectorTerms", obj, terms)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNodeSelectorTerms indicates an expected call of SetNodeSelectorTerms.
func (mr *MockHelperMockRecorder) SetNodeSelectorTerms(obj, terms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNodeSelectorTerms", reflect.TypeOf((*MockHelper)(nil).SetNodeSelectorTerms), obj, terms)
}

// SetTemplateGeneration mocks base method.
func (m *MockHelper) SetTemplateGeneration(req, found *unstructured.Unstructured) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTemplateGeneration", req, found)
}

// SetTemplateGeneration indicates an expected call of SetTemplateGeneration.
func (mr *MockHelperMockRecorder) SetTemplateGeneration(req, found interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTemplateGeneration", reflect.TypeOf((*MockHelper)(nil).SetTemplateGeneration), req, found)
}

// UpdateResourceVersion mocks base method.
func (m *MockHelper) UpdateResourceVersion(req, found *unstructured.Unstructured) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceVersion", req, found)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResourceVersion indicates an expected call of UpdateResourceVersion.
func (mr *MockHelperMockRecorder) UpdateResourceVersion(req, found interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceVersion", reflect.TypeOf((*MockHelper)(nil).UpdateResourceVersion), req, found)
}
