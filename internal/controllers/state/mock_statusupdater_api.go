// Code generated by MockGen. DO NOT EDIT.
// Source: statusupdater.go

// Package state is a generated GoMock package.
package state

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/openshift-psap/special-resource-operator/api/v1beta1"
)

// MockStatusUpdater is a mock of StatusUpdater interface.
type MockStatusUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockStatusUpdaterMockRecorder
}

// MockStatusUpdaterMockRecorder is the mock recorder for MockStatusUpdater.
type MockStatusUpdaterMockRecorder struct {
	mock *MockStatusUpdater
}

// NewMockStatusUpdater creates a new mock instance.
func NewMockStatusUpdater(ctrl *gomock.Controller) *MockStatusUpdater {
	mock := &MockStatusUpdater{ctrl: ctrl}
	mock.recorder = &MockStatusUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusUpdater) EXPECT() *MockStatusUpdaterMockRecorder {
	return m.recorder
}

// UpdateWithState mocks base method.
func (m *MockStatusUpdater) UpdateWithState(arg0 context.Context, arg1 *v1beta1.SpecialResource, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateWithState", arg0, arg1, arg2)
}

// UpdateWithState indicates an expected call of UpdateWithState.
func (mr *MockStatusUpdaterMockRecorder) UpdateWithState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithState", reflect.TypeOf((*MockStatusUpdater)(nil).UpdateWithState), arg0, arg1, arg2)
}
