// Code generated by MockGen. DO NOT EDIT.
// Source: statusupdater.go

// Package state is a generated GoMock package.
package state

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/openshift/special-resource-operator/api/v1beta1"
)

// MockStatusUpdater is a mock of StatusUpdater interface.
type MockStatusUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockStatusUpdaterMockRecorder
}

// MockStatusUpdaterMockRecorder is the mock recorder for MockStatusUpdater.
type MockStatusUpdaterMockRecorder struct {
	mock *MockStatusUpdater
}

// NewMockStatusUpdater creates a new mock instance.
func NewMockStatusUpdater(ctrl *gomock.Controller) *MockStatusUpdater {
	mock := &MockStatusUpdater{ctrl: ctrl}
	mock.recorder = &MockStatusUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusUpdater) EXPECT() *MockStatusUpdaterMockRecorder {
	return m.recorder
}

// SetAsErrored mocks base method.
func (m *MockStatusUpdater) SetAsErrored(ctx context.Context, sr *v1beta1.SpecialResource, reason, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAsErrored", ctx, sr, reason, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAsErrored indicates an expected call of SetAsErrored.
func (mr *MockStatusUpdaterMockRecorder) SetAsErrored(ctx, sr, reason, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAsErrored", reflect.TypeOf((*MockStatusUpdater)(nil).SetAsErrored), ctx, sr, reason, message)
}

// SetAsProgressing mocks base method.
func (m *MockStatusUpdater) SetAsProgressing(ctx context.Context, sr *v1beta1.SpecialResource, reason, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAsProgressing", ctx, sr, reason, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAsProgressing indicates an expected call of SetAsProgressing.
func (mr *MockStatusUpdaterMockRecorder) SetAsProgressing(ctx, sr, reason, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAsProgressing", reflect.TypeOf((*MockStatusUpdater)(nil).SetAsProgressing), ctx, sr, reason, message)
}

// SetAsReady mocks base method.
func (m *MockStatusUpdater) SetAsReady(ctx context.Context, sr *v1beta1.SpecialResource, reason, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAsReady", ctx, sr, reason, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAsReady indicates an expected call of SetAsReady.
func (mr *MockStatusUpdaterMockRecorder) SetAsReady(ctx, sr, reason, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAsReady", reflect.TypeOf((*MockStatusUpdater)(nil).SetAsReady), ctx, sr, reason, message)
}
