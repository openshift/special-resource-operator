// Code generated by MockGen. DO NOT EDIT.
// Source: lifecycle.go

// Package lifecycle is a generated GoMock package.
package lifecycle

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	types "k8s.io/apimachinery/pkg/types"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockLifecycle is a mock of Lifecycle interface.
type MockLifecycle struct {
	ctrl     *gomock.Controller
	recorder *MockLifecycleMockRecorder
}

// MockLifecycleMockRecorder is the mock recorder for MockLifecycle.
type MockLifecycleMockRecorder struct {
	mock *MockLifecycle
}

// NewMockLifecycle creates a new mock instance.
func NewMockLifecycle(ctrl *gomock.Controller) *MockLifecycle {
	mock := &MockLifecycle{ctrl: ctrl}
	mock.recorder = &MockLifecycleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLifecycle) EXPECT() *MockLifecycleMockRecorder {
	return m.recorder
}

// GetPodFromDaemonSet mocks base method.
func (m *MockLifecycle) GetPodFromDaemonSet(arg0 context.Context, arg1 types.NamespacedName) *v1.PodList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodFromDaemonSet", arg0, arg1)
	ret0, _ := ret[0].(*v1.PodList)
	return ret0
}

// GetPodFromDaemonSet indicates an expected call of GetPodFromDaemonSet.
func (mr *MockLifecycleMockRecorder) GetPodFromDaemonSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodFromDaemonSet", reflect.TypeOf((*MockLifecycle)(nil).GetPodFromDaemonSet), arg0, arg1)
}

// GetPodFromDeployment mocks base method.
func (m *MockLifecycle) GetPodFromDeployment(arg0 context.Context, arg1 types.NamespacedName) *v1.PodList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodFromDeployment", arg0, arg1)
	ret0, _ := ret[0].(*v1.PodList)
	return ret0
}

// GetPodFromDeployment indicates an expected call of GetPodFromDeployment.
func (mr *MockLifecycleMockRecorder) GetPodFromDeployment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodFromDeployment", reflect.TypeOf((*MockLifecycle)(nil).GetPodFromDeployment), arg0, arg1)
}

// UpdateDaemonSetPods mocks base method.
func (m *MockLifecycle) UpdateDaemonSetPods(arg0 context.Context, arg1 client.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDaemonSetPods", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDaemonSetPods indicates an expected call of UpdateDaemonSetPods.
func (mr *MockLifecycleMockRecorder) UpdateDaemonSetPods(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDaemonSetPods", reflect.TypeOf((*MockLifecycle)(nil).UpdateDaemonSetPods), arg0, arg1)
}
