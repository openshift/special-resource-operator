// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package cache is a generated GoMock package.
package cache

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNodesCacher is a mock of NodesCacher interface.
type MockNodesCacher struct {
	ctrl     *gomock.Controller
	recorder *MockNodesCacherMockRecorder
}

// MockNodesCacherMockRecorder is the mock recorder for MockNodesCacher.
type MockNodesCacherMockRecorder struct {
	mock *MockNodesCacher
}

// NewMockNodesCacher creates a new mock instance.
func NewMockNodesCacher(ctrl *gomock.Controller) *MockNodesCacher {
	mock := &MockNodesCacher{ctrl: ctrl}
	mock.recorder = &MockNodesCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodesCacher) EXPECT() *MockNodesCacherMockRecorder {
	return m.recorder
}

// Nodes mocks base method.
func (m *MockNodesCacher) Nodes(arg0 context.Context, arg1 map[string]string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nodes", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Nodes indicates an expected call of Nodes.
func (mr *MockNodesCacherMockRecorder) Nodes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nodes", reflect.TypeOf((*MockNodesCacher)(nil).Nodes), arg0, arg1, arg2)
}
