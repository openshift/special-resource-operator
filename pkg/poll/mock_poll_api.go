// Code generated by MockGen. DO NOT EDIT.
// Source: poll.go

// Package poll is a generated GoMock package.
package poll

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
)

// MockPollActions is a mock of PollActions interface.
type MockPollActions struct {
	ctrl     *gomock.Controller
	recorder *MockPollActionsMockRecorder
}

// MockPollActionsMockRecorder is the mock recorder for MockPollActions.
type MockPollActionsMockRecorder struct {
	mock *MockPollActions
}

// NewMockPollActions creates a new mock instance.
func NewMockPollActions(ctrl *gomock.Controller) *MockPollActions {
	mock := &MockPollActions{ctrl: ctrl}
	mock.recorder = &MockPollActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPollActions) EXPECT() *MockPollActionsMockRecorder {
	return m.recorder
}

// ForDaemonSet mocks base method.
func (m *MockPollActions) ForDaemonSet(obj *unstructured.Unstructured) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForDaemonSet", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForDaemonSet indicates an expected call of ForDaemonSet.
func (mr *MockPollActionsMockRecorder) ForDaemonSet(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForDaemonSet", reflect.TypeOf((*MockPollActions)(nil).ForDaemonSet), obj)
}

// ForDaemonSetLogs mocks base method.
func (m *MockPollActions) ForDaemonSetLogs(obj *unstructured.Unstructured, pattern string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForDaemonSetLogs", obj, pattern)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForDaemonSetLogs indicates an expected call of ForDaemonSetLogs.
func (mr *MockPollActionsMockRecorder) ForDaemonSetLogs(obj, pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForDaemonSetLogs", reflect.TypeOf((*MockPollActions)(nil).ForDaemonSetLogs), obj, pattern)
}

// ForResource mocks base method.
func (m *MockPollActions) ForResource(obj *unstructured.Unstructured) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForResource", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForResource indicates an expected call of ForResource.
func (mr *MockPollActionsMockRecorder) ForResource(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForResource", reflect.TypeOf((*MockPollActions)(nil).ForResource), obj)
}

// ForResourceUnavailability mocks base method.
func (m *MockPollActions) ForResourceUnavailability(obj *unstructured.Unstructured) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForResourceUnavailability", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForResourceUnavailability indicates an expected call of ForResourceUnavailability.
func (mr *MockPollActionsMockRecorder) ForResourceUnavailability(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForResourceUnavailability", reflect.TypeOf((*MockPollActions)(nil).ForResourceUnavailability), obj)
}
