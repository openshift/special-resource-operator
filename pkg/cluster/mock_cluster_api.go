// Code generated by MockGen. DO NOT EDIT.
// Source: cluster.go

// Package cluster is a generated GoMock package.
package cluster

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCluster is a mock of Cluster interface.
type MockCluster struct {
	ctrl     *gomock.Controller
	recorder *MockClusterMockRecorder
}

// MockClusterMockRecorder is the mock recorder for MockCluster.
type MockClusterMockRecorder struct {
	mock *MockCluster
}

// NewMockCluster creates a new mock instance.
func NewMockCluster(ctrl *gomock.Controller) *MockCluster {
	mock := &MockCluster{ctrl: ctrl}
	mock.recorder = &MockClusterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCluster) EXPECT() *MockClusterMockRecorder {
	return m.recorder
}

// OSImageURL mocks base method.
func (m *MockCluster) OSImageURL() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSImageURL")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSImageURL indicates an expected call of OSImageURL.
func (mr *MockClusterMockRecorder) OSImageURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSImageURL", reflect.TypeOf((*MockCluster)(nil).OSImageURL))
}

// OperatingSystem mocks base method.
func (m *MockCluster) OperatingSystem() (string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperatingSystem")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// OperatingSystem indicates an expected call of OperatingSystem.
func (mr *MockClusterMockRecorder) OperatingSystem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatingSystem", reflect.TypeOf((*MockCluster)(nil).OperatingSystem))
}

// Version mocks base method.
func (m *MockCluster) Version() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Version indicates an expected call of Version.
func (mr *MockClusterMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockCluster)(nil).Version))
}

// VersionHistory mocks base method.
func (m *MockCluster) VersionHistory() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VersionHistory")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VersionHistory indicates an expected call of VersionHistory.
func (mr *MockClusterMockRecorder) VersionHistory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VersionHistory", reflect.TypeOf((*MockCluster)(nil).VersionHistory))
}
