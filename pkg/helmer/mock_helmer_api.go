// Code generated by MockGen. DO NOT EDIT.
// Source: helmer.go

// Package helmer is a generated GoMock package.
package helmer

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/openshift/special-resource-operator/pkg/helmer/api/v1beta1"
	chart "helm.sh/helm/v3/pkg/chart"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockHelmer is a mock of Helmer interface.
type MockHelmer struct {
	ctrl     *gomock.Controller
	recorder *MockHelmerMockRecorder
}

// MockHelmerMockRecorder is the mock recorder for MockHelmer.
type MockHelmerMockRecorder struct {
	mock *MockHelmer
}

// NewMockHelmer creates a new mock instance.
func NewMockHelmer(ctrl *gomock.Controller) *MockHelmer {
	mock := &MockHelmer{ctrl: ctrl}
	mock.recorder = &MockHelmerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelmer) EXPECT() *MockHelmerMockRecorder {
	return m.recorder
}

// GetHelmOutput mocks base method.
func (m *MockHelmer) GetHelmOutput(arg0 context.Context, arg1 chart.Chart, arg2 map[string]interface{}, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHelmOutput", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHelmOutput indicates an expected call of GetHelmOutput.
func (mr *MockHelmerMockRecorder) GetHelmOutput(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHelmOutput", reflect.TypeOf((*MockHelmer)(nil).GetHelmOutput), arg0, arg1, arg2, arg3)
}

// Load mocks base method.
func (m *MockHelmer) Load(arg0 v1beta1.HelmChart) (*chart.Chart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].(*chart.Chart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockHelmerMockRecorder) Load(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockHelmer)(nil).Load), arg0)
}

// Run mocks base method.
func (m *MockHelmer) Run(arg0 context.Context, arg1 chart.Chart, arg2 map[string]interface{}, arg3 v1.Object, arg4, arg5 string, arg6 map[string]string, arg7, arg8 string, arg9 bool, arg10 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockHelmerMockRecorder) Run(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockHelmer)(nil).Run), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
}
