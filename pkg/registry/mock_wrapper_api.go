// Code generated by MockGen. DO NOT EDIT.
// Source: wrapper.go

// Package registry is a generated GoMock package.
package registry

import (
	context "context"
	x509 "crypto/x509"
	reflect "reflect"

	sysregistriesv2 "github.com/containers/image/v5/pkg/sysregistriesv2"
	gomock "github.com/golang/mock/gomock"
	crane "github.com/google/go-containerregistry/pkg/crane"
	v1 "github.com/google/go-containerregistry/pkg/v1"
)

// MockMirrorResolver is a mock of MirrorResolver interface.
type MockMirrorResolver struct {
	ctrl     *gomock.Controller
	recorder *MockMirrorResolverMockRecorder
}

// MockMirrorResolverMockRecorder is the mock recorder for MockMirrorResolver.
type MockMirrorResolverMockRecorder struct {
	mock *MockMirrorResolver
}

// NewMockMirrorResolver creates a new mock instance.
func NewMockMirrorResolver(ctrl *gomock.Controller) *MockMirrorResolver {
	mock := &MockMirrorResolver{ctrl: ctrl}
	mock.recorder = &MockMirrorResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMirrorResolver) EXPECT() *MockMirrorResolverMockRecorder {
	return m.recorder
}

// GetPullSourcesForImageReference mocks base method.
func (m *MockMirrorResolver) GetPullSourcesForImageReference(arg0 string) ([]sysregistriesv2.PullSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullSourcesForImageReference", arg0)
	ret0, _ := ret[0].([]sysregistriesv2.PullSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullSourcesForImageReference indicates an expected call of GetPullSourcesForImageReference.
func (mr *MockMirrorResolverMockRecorder) GetPullSourcesForImageReference(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullSourcesForImageReference", reflect.TypeOf((*MockMirrorResolver)(nil).GetPullSourcesForImageReference), arg0)
}

// MockCertPoolGetter is a mock of CertPoolGetter interface.
type MockCertPoolGetter struct {
	ctrl     *gomock.Controller
	recorder *MockCertPoolGetterMockRecorder
}

// MockCertPoolGetterMockRecorder is the mock recorder for MockCertPoolGetter.
type MockCertPoolGetterMockRecorder struct {
	mock *MockCertPoolGetter
}

// NewMockCertPoolGetter creates a new mock instance.
func NewMockCertPoolGetter(ctrl *gomock.Controller) *MockCertPoolGetter {
	mock := &MockCertPoolGetter{ctrl: ctrl}
	mock.recorder = &MockCertPoolGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertPoolGetter) EXPECT() *MockCertPoolGetterMockRecorder {
	return m.recorder
}

// SystemAndHostCertPool mocks base method.
func (m *MockCertPoolGetter) SystemAndHostCertPool() (*x509.CertPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemAndHostCertPool")
	ret0, _ := ret[0].(*x509.CertPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SystemAndHostCertPool indicates an expected call of SystemAndHostCertPool.
func (mr *MockCertPoolGetterMockRecorder) SystemAndHostCertPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemAndHostCertPool", reflect.TypeOf((*MockCertPoolGetter)(nil).SystemAndHostCertPool))
}

// MockCraneWrapper is a mock of CraneWrapper interface.
type MockCraneWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockCraneWrapperMockRecorder
}

// MockCraneWrapperMockRecorder is the mock recorder for MockCraneWrapper.
type MockCraneWrapperMockRecorder struct {
	mock *MockCraneWrapper
}

// NewMockCraneWrapper creates a new mock instance.
func NewMockCraneWrapper(ctrl *gomock.Controller) *MockCraneWrapper {
	mock := &MockCraneWrapper{ctrl: ctrl}
	mock.recorder = &MockCraneWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCraneWrapper) EXPECT() *MockCraneWrapperMockRecorder {
	return m.recorder
}

// Manifest mocks base method.
func (m *MockCraneWrapper) Manifest(arg0 context.Context, arg1 string, arg2 ...crane.Option) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Manifest", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Manifest indicates an expected call of Manifest.
func (mr *MockCraneWrapperMockRecorder) Manifest(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Manifest", reflect.TypeOf((*MockCraneWrapper)(nil).Manifest), varargs...)
}

// PullLayer mocks base method.
func (m *MockCraneWrapper) PullLayer(arg0 context.Context, arg1 string, arg2 ...crane.Option) (v1.Layer, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PullLayer", varargs...)
	ret0, _ := ret[0].(v1.Layer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullLayer indicates an expected call of PullLayer.
func (mr *MockCraneWrapperMockRecorder) PullLayer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullLayer", reflect.TypeOf((*MockCraneWrapper)(nil).PullLayer), varargs...)
}
