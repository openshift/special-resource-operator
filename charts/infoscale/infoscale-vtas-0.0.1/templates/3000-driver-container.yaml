#
# Note: Service Account for driver container is already created as a part of state file 2000-infoscale-rest-certificate.yaml
#

{{- if eq .Values.runArgs.platform "openshift-container-platform" }}
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}-{{.Values.operatingSystemMajor}}
rules:
- apiGroups:
  - security.openshift.io
  resources:
  - securitycontextconstraints
  verbs:
  - use
  resourceNames:
  - {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}-{{.Values.operatingSystemMajor}}

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}-{{.Values.operatingSystemMajor}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}-{{.Values.operatingSystemMajor}}
subjects:
- kind: ServiceAccount
  name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}-{{.Values.operatingSystemMajor}}
userNames:
- system:serviceaccount:{{.Values.specialresource.spec.namespace}}:{{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}-{{.Values.operatingSystemMajor}}

---

allowHostDirVolumePlugin: true
allowHostIPC: false
allowHostNetwork: true
allowHostPID: false
allowHostPorts: true
allowPrivilegeEscalation: true
allowPrivilegedContainer: true
allowedCapabilities:
- '*'
allowedUnsafeSysctls:
- '*'
apiVersion: security.openshift.io/v1
defaultAddCapabilities: null
fsGroup:
  type: RunAsAny
groups: []
kind: SecurityContextConstraints
metadata:
  annotations:
    kubernetes.io/description: Custom SCC similar to privilege SCC-HOSTPID/HOSTIPC
    release.openshift.io/create-only: "true"
  name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}-{{.Values.operatingSystemMajor}}
priority: null
readOnlyRootFilesystem: false
requiredDropCapabilities: null
runAsUser:
  type: RunAsAny
seLinuxContext:
  type: RunAsAny
supplementalGroups:
  type: RunAsAny
users:
- system:serviceaccount:{{.Values.specialresource.spec.namespace}}:{{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}-{{.Values.operatingSystemMajor}}
volumes:
- configMap
- emptyDir
- hostPath
- secret

---
{{- end }}

apiVersion: v1
kind: Service
metadata:
  name: {{.Values.specialresource.metadata.name}}-rest
  annotations:
     specialresource.openshift.io/wait: "true"
spec:
  type: ClusterIP
  ports:
  - port: 8443
    targetPort: 9443
    protocol: TCP
  selector:
    {{.Values.node.selector}}: "true"

---

apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}-{{.Values.operatingSystemMajor}}
    {{.Values.node.selector}}: "true"
  name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}-{{.Values.operatingSystemMajor}}
  annotations:
    {{- if eq .Values.runArgs.platform "openshift-container-platform" }}
    openshift.io/scc: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}-{{.Values.operatingSystemMajor}}
    {{- end }}
    specialresource.openshift.io/wait: "true"
    specialresource.openshift.io/state: "driver-container"
    specialresource.openshift.io/driver-container-vendor: infoscale-vtas
spec:
  selector:
    matchLabels:
      app: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}-{{.Values.operatingSystemMajor}}
      {{.Values.node.selector}}: "true"
  updateStrategy:
    type: OnDelete
  template:
    metadata:
      # Mark this pod as a critical add-on; when enabled, the critical add-on scheduler
      # reserves resources for critical add-on pods so that they can be rescheduled after
      # a failure.  This annotation works in tandem with the toleration below.
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        app: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}-{{.Values.operatingSystemMajor}}
        {{.Values.node.selector}}: "true"
    spec:
      serviceAccount: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}-{{.Values.operatingSystemMajor}}
      serviceAccountName: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}-{{.Values.operatingSystemMajor}}
      hostPID: false
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - image: {{.Values.runArgs.infoscaleImage}}-{{.Values.operatingSystemMajorMinor}}-{{.Values.kernelFullVersion}}
        imagePullPolicy: {{.Values.runArgs.infoscaleImgPullPolicy}}
        name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}-{{.Values.operatingSystemMajor}}
        securityContext:
          privileged: true
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh","-c","/sbin/vss-stop"]
        readinessProbe:
          exec:
            command: ["/bin/sh", "-c", "/sbin/vss-readiness"]
          initialDelaySeconds: 30
          periodSeconds: 45
        terminationMessagePath: /tmp/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /dev
          name: dev
          mountPropagation: "Bidirectional"
        - mountPath: /var/lib/kubelet/plugins
          name: csi-stage
          mountPropagation: "Bidirectional"
        - name: vss-config
          mountPath: "/vss-config"
          readOnly: true
        - name: cert-dir
          mountPath: /etc/vx/certstore/rest
        - name: log-sys
          mountPath: /var/log
        - name: log-vxfs
          mountPath: /var/VRTSvxfs
        - name: log-vcs
          mountPath: /var/VRTSvcs/log
        - name: log-rest
          mountPath: /opt/VRTSrest/log
        - name: log-veki
          mountPath: /var/VRTSveki
        - name: log-vras
          mountPath: /var/vx/vras/log
        - name: log-vxvm
          mountPath: /var/adm/vx
        - name: log-vxconfigd
          mountPath: /etc/vx/vxconfigd.log
        - name: log-vss
          mountPath: /var/VRTSvss
        - name: log-installer
          mountPath: /opt/VRTS/install/logs
      terminationGracePeriodSeconds: {{.Values.runArgs.terminationPeriod}}
      restartPolicy: Always
      tolerations:
        - effect: NoSchedule
          key: veritas/infoscale-upgrade
          operator: Exists
      volumes:
        - name: dev
          hostPath:
              path: /dev
              type: Directory
        - name: csi-stage
          hostPath:
            path: /var/lib/kubelet/plugins
            type: Directory
        - name: vss-config
          configMap:
              name: {{.Values.runArgs.infoscaleConfigMap}}
              defaultMode: 0700
        - name: cert-dir
          secret:
              secretName: rest-tls-cert

# Creating separate hostpath volume for each log destination
        - name: log-sys
          hostPath:
              path: /var/VRTS/log/var/log
              type: DirectoryOrCreate
        - name: log-vxfs
          hostPath:
              path: /var/VRTS/log/var/VRTSvxfs
              type: DirectoryOrCreate
        - name: log-vcs
          hostPath:
              path: /var/VRTS/log/var/VRTSvcs/log
              type: DirectoryOrCreate
        - name: log-rest
          hostPath:
              path: /var/VRTS/log/opt/VRTSrest/log
              type: DirectoryOrCreate
        - name: log-veki
          hostPath:
              path: /var/VRTS/log/var/VRTSveki
              type: DirectoryOrCreate
        - name: log-vras
          hostPath:
              path: /var/VRTS/log/var/vx/vras/log
              type: DirectoryOrCreate
        - name: log-vxvm
          hostPath:
              path: /var/VRTS/log/var/adm/vx
              type: DirectoryOrCreate
        - name: log-vxconfigd
          hostPath:
              path: /var/VRTS/log/var/adm/vx/vxconfigd.log
              type: FileOrCreate
        - name: log-vss
          hostPath:
              path: /var/VRTS/log/var/VRTSvss
              type: DirectoryOrCreate
        - name: log-installer
          hostPath:
              path: /var/VRTS/log/opt/VRTS/install/logs
              type: DirectoryOrCreate
      nodeSelector:
        feature.node.kubernetes.io/kernel-version.full: "{{.Values.kernelFullVersion}}"
        {{.Values.node.selector}}: "true"
