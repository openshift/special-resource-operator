// Code generated by MockGen. DO NOT EDIT.
// Source: registry.go

// Package registry is a generated GoMock package.
package registry

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/google/go-containerregistry/pkg/v1"
)

// MockRegistry is a mock of Registry interface.
type MockRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryMockRecorder
}

// MockRegistryMockRecorder is the mock recorder for MockRegistry.
type MockRegistryMockRecorder struct {
	mock *MockRegistry
}

// NewMockRegistry creates a new mock instance.
func NewMockRegistry(ctrl *gomock.Controller) *MockRegistry {
	mock := &MockRegistry{ctrl: ctrl}
	mock.recorder = &MockRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistry) EXPECT() *MockRegistryMockRecorder {
	return m.recorder
}

// ExtractToolkitRelease mocks base method.
func (m *MockRegistry) ExtractToolkitRelease(arg0 v1.Layer) (*DriverToolkitEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractToolkitRelease", arg0)
	ret0, _ := ret[0].(*DriverToolkitEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractToolkitRelease indicates an expected call of ExtractToolkitRelease.
func (mr *MockRegistryMockRecorder) ExtractToolkitRelease(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractToolkitRelease", reflect.TypeOf((*MockRegistry)(nil).ExtractToolkitRelease), arg0)
}

// GetLayerByDigest mocks base method.
func (m *MockRegistry) GetLayerByDigest(arg0 context.Context, arg1, arg2 string) (v1.Layer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayerByDigest", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1.Layer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLayerByDigest indicates an expected call of GetLayerByDigest.
func (mr *MockRegistryMockRecorder) GetLayerByDigest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayerByDigest", reflect.TypeOf((*MockRegistry)(nil).GetLayerByDigest), arg0, arg1, arg2)
}

// GetLayersDigests mocks base method.
func (m *MockRegistry) GetLayersDigests(arg0 context.Context, arg1 string) (string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayersDigests", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLayersDigests indicates an expected call of GetLayersDigests.
func (mr *MockRegistryMockRecorder) GetLayersDigests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayersDigests", reflect.TypeOf((*MockRegistry)(nil).GetLayersDigests), arg0, arg1)
}

// LastLayer mocks base method.
func (m *MockRegistry) LastLayer(arg0 context.Context, arg1 string) (v1.Layer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastLayer", arg0, arg1)
	ret0, _ := ret[0].(v1.Layer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastLayer indicates an expected call of LastLayer.
func (mr *MockRegistryMockRecorder) LastLayer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastLayer", reflect.TypeOf((*MockRegistry)(nil).LastLayer), arg0, arg1)
}

// ReleaseImageMachineOSConfig mocks base method.
func (m *MockRegistry) ReleaseImageMachineOSConfig(layer v1.Layer) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseImageMachineOSConfig", layer)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseImageMachineOSConfig indicates an expected call of ReleaseImageMachineOSConfig.
func (mr *MockRegistryMockRecorder) ReleaseImageMachineOSConfig(layer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseImageMachineOSConfig", reflect.TypeOf((*MockRegistry)(nil).ReleaseImageMachineOSConfig), layer)
}

// ReleaseManifests mocks base method.
func (m *MockRegistry) ReleaseManifests(arg0 v1.Layer) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseManifests", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseManifests indicates an expected call of ReleaseManifests.
func (mr *MockRegistryMockRecorder) ReleaseManifests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseManifests", reflect.TypeOf((*MockRegistry)(nil).ReleaseManifests), arg0)
}

// ReleaseMetadataOCPVersion mocks base method.
func (m *MockRegistry) ReleaseMetadataOCPVersion(arg0 v1.Layer) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseMetadataOCPVersion", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseMetadataOCPVersion indicates an expected call of ReleaseMetadataOCPVersion.
func (mr *MockRegistryMockRecorder) ReleaseMetadataOCPVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseMetadataOCPVersion", reflect.TypeOf((*MockRegistry)(nil).ReleaseMetadataOCPVersion), arg0)
}
